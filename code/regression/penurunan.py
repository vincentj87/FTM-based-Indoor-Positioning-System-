from IPython.display import display
import sympy as sy
from sympy.vector import CoordSys3D
sy.init_printing()

x_tag,y_tag,z_tag=sy.symbols("x_tag y_tag z_tag",real=True)
x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4,d1,d2,d3,d4=sy.symbols("x1 y1 z1 x2 y2 z2 x3 y3 z3 x4 y4 z4 d1 d2 d3 d4",real=True)

Au=sy.Matrix([
    [-2*x4+2*x1,-2*y4+2*y1,-2*z4+2*z1],
    [-2*x4+2*x2,-2*y4+2*y2,-2*z4+2*z2],
    [-2*x4+2*x3,-2*y4+2*y3,-2*z4+2*z3]
])
AuT=sy.Matrix([
    [2*x1 - 2*x4, 2*y1 - 2*y4, 2*z1 - 2*z4], 
    [2*x2 - 2*x4, 2*y2 - 2*y4, 2*z2 - 2*z4], 
    [2*x3 - 2*x4, 2*y3 - 2*y4, 2*z3 - 2*z4]
])
Du= sy.Matrix([
    [d4**2-d1**2+x1**2-x4**2+y1**2-y4**2+z1**2-z4**2],
    [d4**2-d2**2+x2**2-x4**2+y2**2-y4**2+z2**2-z4**2],
    [d4**2-d3**2+x3**2-x4**2+y3**2-y4**2+z3**2-z4**2],
])

#AuT_dot_Au=sy.simplify(AuT*Au)
AuT_dot_Au=sy.Matrix([
    [4*(x1 - x4)**2 + 4*(x2 - x4)*(y1 - y4) + 4*(x3 - x4)*(z1 - z4), 4*(x1 - x4)*(y1 - y4) + 4*(y1 - y4)*(y2 - y4) + 4*(y3 - y4)*(z1 - z4), 4*(x1 - x4)*(z1 - z4) + 4*(y1 - y4)*(z2 - z4) + 4*(z1 - z4)*(z3 - z4)],
    [4*(x1 - x4)*(x2 - x4) + 4*(x2 - x4)*(y2 - y4) + 4*(x3 - x4)*(z2 - z4), 4*(x2 - x4)*(y1 - y4) + 4*(y2 - y4)**2 + 4*(y3 - y4)*(z2 - z4), 4*(x2 - x4)*(z1 - z4) + 4*(y2 - y4)*(z2 - z4) + 4*(z2 - z4)*(z3 - z4)],
    [4*(x1 - x4)*(x3 - x4) + 4*(x2 - x4)*(y3 - y4) + 4*(x3 - x4)*(z3 - z4), 4*(x3 - x4)*(y1 - y4) + 4*(y2 - y4)*(y3 - y4) + 4*(y3 - y4)*(z3 - z4), 4*(x3 - x4)*(z1 - z4) + 4*(y3 - y4)*(z2 - z4) + 4*(z3 - z4)**2]
    ])
# AuT_dot_Du=sy.simplify(AuT*Du)
AuT_dot_Du=sy.Matrix([
    [-2*(x1 - x4)*(d1**2 - d4**2 - x1**2 + x4**2 - y1**2 + y4**2 - z1**2 + z4**2) - 2*(y1 - y4)*(d2**2 - d4**2 - x2**2 + x4**2 - y2**2 + y4**2 - z2**2 + z4**2) - 2*(z1 - z4)*(d3**2 - d4**2 - x3**2 + x4**2 - y3**2 + y4**2 - z3**2 + z4**2)],
    [-2*(x2 - x4)*(d1**2 - d4**2 - x1**2 + x4**2 - y1**2 + y4**2 - z1**2 + z4**2) - 2*(y2 - y4)*(d2**2 - d4**2 - x2**2 + x4**2 - y2**2 + y4**2 - z2**2 + z4**2) - 2*(z2 - z4)*(d3**2 - d4**2 - x3**2 + x4**2 - y3**2 + y4**2 - z3**2 + z4**2)],
    [-2*(x3 - x4)*(d1**2 - d4**2 - x1**2 + x4**2 - y1**2 + y4**2 - z1**2 + z4**2) - 2*(y3 - y4)*(d2**2 - d4**2 - x2**2 + x4**2 - y2**2 + y4**2 - z2**2 + z4**2) - 2*(z3 - z4)*(d3**2 - d4**2 - x3**2 + x4**2 - y3**2 + y4**2 - z3**2 + z4**2)]])

AuT_dot_Au_Inv=AuT_dot_Au.inv()
Xu=sy.simplify(AuT_dot_Au_Inv*AuT_dot_Du)
Xu=sy.Matrix([
    [(-d1**2*y2*z3 + d1**2*y2*z4 + d1**2*y3*z2 - d1**2*y3*z4 - d1**2*y4*z2 + d1**2*y4*z3 + d2**2*y1*z3 - d2**2*y1*z4 - d2**2*y3*z1 + d2**2*y3*z4 + d2**2*y4*z1 - d2**2*y4*z3 - d3**2*y1*z2 + d3**2*y1*z4 + d3**2*y2*z1 - d3**2*y2*z4 - d3**2*y4*z1 + d3**2*y4*z2 + d4**2*y1*z2 - d4**2*y1*z3 - d4**2*y2*z1 + d4**2*y2*z3 + d4**2*y3*z1 - d4**2*y3*z2 + x1**2*y2*z3 - x1**2*y2*z4 - x1**2*y3*z2 + x1**2*y3*z4 + x1**2*y4*z2 - x1**2*y4*z3 - x2**2*y1*z3 + x2**2*y1*z4 + x2**2*y3*z1 - x2**2*y3*z4 - x2**2*y4*z1 + x2**2*y4*z3 + x3**2*y1*z2 - x3**2*y1*z4 - x3**2*y2*z1 + x3**2*y2*z4 + x3**2*y4*z1 - x3**2*y4*z2 - x4**2*y1*z2 + x4**2*y1*z3 + x4**2*y2*z1 - x4**2*y2*z3 - x4**2*y3*z1 + x4**2*y3*z2 + y1**2*y2*z3 - y1**2*y2*z4 - y1**2*y3*z2 + y1**2*y3*z4 + y1**2*y4*z2 - y1**2*y4*z3 - y1*y2**2*z3 + y1*y2**2*z4 + y1*y3**2*z2 - y1*y3**2*z4 - y1*y4**2*z2 + y1*y4**2*z3 - y1*z2**2*z3 + y1*z2**2*z4 + y1*z2*z3**2 - y1*z2*z4**2 - y1*z3**2*z4 + y1*z3*z4**2 + y2**2*y3*z1 - y2**2*y3*z4 - y2**2*y4*z1 + y2**2*y4*z3 - y2*y3**2*z1 + y2*y3**2*z4 + y2*y4**2*z1 - y2*y4**2*z3 + y2*z1**2*z3 - y2*z1**2*z4 - y2*z1*z3**2 + y2*z1*z4**2 + y2*z3**2*z4 - y2*z3*z4**2 + y3**2*y4*z1 - y3**2*y4*z2 - y3*y4**2*z1 + y3*y4**2*z2 - y3*z1**2*z2 + y3*z1**2*z4 + y3*z1*z2**2 - y3*z1*z4**2 - y3*z2**2*z4 + y3*z2*z4**2 + y4*z1**2*z2 - y4*z1**2*z3 - y4*z1*z2**2 + y4*z1*z3**2 + y4*z2**2*z3 - y4*z2*z3**2)/(2*(x1*y2*z3 - x1*y2*z4 - x1*y3*z2 + x1*y3*z4 + x1*y4*z2 - x1*y4*z3 - x2*y1*z3 + x2*y1*z4 + x2*y3*z1 - x2*y3*z4 - x2*y4*z1 + x2*y4*z3 + x3*y1*z2 - x3*y1*z4 - x3*y2*z1 + x3*y2*z4 + x3*y4*z1 - x3*y4*z2 - x4*y1*z2 + x4*y1*z3 + x4*y2*z1 - x4*y2*z3 - x4*y3*z1 + x4*y3*z2))],
    [( d1**2*x2*z3 - d1**2*x2*z4 - d1**2*x3*z2 + d1**2*x3*z4 + d1**2*x4*z2 - d1**2*x4*z3 - d2**2*x1*z3 + d2**2*x1*z4 + d2**2*x3*z1 - d2**2*x3*z4 - d2**2*x4*z1 + d2**2*x4*z3 + d3**2*x1*z2 - d3**2*x1*z4 - d3**2*x2*z1 + d3**2*x2*z4 + d3**2*x4*z1 - d3**2*x4*z2 - d4**2*x1*z2 + d4**2*x1*z3 + d4**2*x2*z1 - d4**2*x2*z3 - d4**2*x3*z1 + d4**2*x3*z2 - x1**2*x2*z3 + x1**2*x2*z4 + x1**2*x3*z2 - x1**2*x3*z4 - x1**2*x4*z2 + x1**2*x4*z3 + x1*x2**2*z3 - x1*x2**2*z4 - x1*x3**2*z2 + x1*x3**2*z4 + x1*x4**2*z2 - x1*x4**2*z3 + x1*y2**2*z3 - x1*y2**2*z4 - x1*y3**2*z2 + x1*y3**2*z4 + x1*y4**2*z2 - x1*y4**2*z3 + x1*z2**2*z3 - x1*z2**2*z4 - x1*z2*z3**2 + x1*z2*z4**2 + x1*z3**2*z4 - x1*z3*z4**2 - x2**2*x3*z1 + x2**2*x3*z4 + x2**2*x4*z1 - x2**2*x4*z3 + x2*x3**2*z1 - x2*x3**2*z4 - x2*x4**2*z1 + x2*x4**2*z3 - x2*y1**2*z3 + x2*y1**2*z4 + x2*y3**2*z1 - x2*y3**2*z4 - x2*y4**2*z1 + x2*y4**2*z3 - x2*z1**2*z3 + x2*z1**2*z4 + x2*z1*z3**2 - x2*z1*z4**2 - x2*z3**2*z4 + x2*z3*z4**2 - x3**2*x4*z1 + x3**2*x4*z2 + x3*x4**2*z1 - x3*x4**2*z2 + x3*y1**2*z2 - x3*y1**2*z4 - x3*y2**2*z1 + x3*y2**2*z4 + x3*y4**2*z1 - x3*y4**2*z2 + x3*z1**2*z2 - x3*z1**2*z4 - x3*z1*z2**2 + x3*z1*z4**2 + x3*z2**2*z4 - x3*z2*z4**2 - x4*y1**2*z2 + x4*y1**2*z3 + x4*y2**2*z1 - x4*y2**2*z3 - x4*y3**2*z1 + x4*y3**2*z2 - x4*z1**2*z2 + x4*z1**2*z3 + x4*z1*z2**2 - x4*z1*z3**2 - x4*z2**2*z3 + x4*z2*z3**2)/(2*(x1*y2*z3 - x1*y2*z4 - x1*y3*z2 + x1*y3*z4 + x1*y4*z2 - x1*y4*z3 - x2*y1*z3 + x2*y1*z4 + x2*y3*z1 - x2*y3*z4 - x2*y4*z1 + x2*y4*z3 + x3*y1*z2 - x3*y1*z4 - x3*y2*z1 + x3*y2*z4 + x3*y4*z1 - x3*y4*z2 - x4*y1*z2 + x4*y1*z3 + x4*y2*z1 - x4*y2*z3 - x4*y3*z1 + x4*y3*z2))],
    [(-d1**2*x2*y3 + d1**2*x2*y4 + d1**2*x3*y2 - d1**2*x3*y4 - d1**2*x4*y2 + d1**2*x4*y3 + d2**2*x1*y3 - d2**2*x1*y4 - d2**2*x3*y1 + d2**2*x3*y4 + d2**2*x4*y1 - d2**2*x4*y3 - d3**2*x1*y2 + d3**2*x1*y4 + d3**2*x2*y1 - d3**2*x2*y4 - d3**2*x4*y1 + d3**2*x4*y2 + d4**2*x1*y2 - d4**2*x1*y3 - d4**2*x2*y1 + d4**2*x2*y3 + d4**2*x3*y1 - d4**2*x3*y2 + x1**2*x2*y3 - x1**2*x2*y4 - x1**2*x3*y2 + x1**2*x3*y4 + x1**2*x4*y2 - x1**2*x4*y3 - x1*x2**2*y3 + x1*x2**2*y4 + x1*x3**2*y2 - x1*x3**2*y4 - x1*x4**2*y2 + x1*x4**2*y3 - x1*y2**2*y3 + x1*y2**2*y4 + x1*y2*y3**2 - x1*y2*y4**2 + x1*y2*z3**2 - x1*y2*z4**2 - x1*y3**2*y4 + x1*y3*y4**2 - x1*y3*z2**2 + x1*y3*z4**2 + x1*y4*z2**2 - x1*y4*z3**2 + x2**2*x3*y1 - x2**2*x3*y4 - x2**2*x4*y1 + x2**2*x4*y3 - x2*x3**2*y1 + x2*x3**2*y4 + x2*x4**2*y1 - x2*x4**2*y3 + x2*y1**2*y3 - x2*y1**2*y4 - x2*y1*y3**2 + x2*y1*y4**2 - x2*y1*z3**2 + x2*y1*z4**2 + x2*y3**2*y4 - x2*y3*y4**2 + x2*y3*z1**2 - x2*y3*z4**2 - x2*y4*z1**2 + x2*y4*z3**2 + x3**2*x4*y1 - x3**2*x4*y2 - x3*x4**2*y1 + x3*x4**2*y2 - x3*y1**2*y2 + x3*y1**2*y4 + x3*y1*y2**2 - x3*y1*y4**2 + x3*y1*z2**2 - x3*y1*z4**2 - x3*y2**2*y4 + x3*y2*y4**2 - x3*y2*z1**2 + x3*y2*z4**2 + x3*y4*z1**2 - x3*y4*z2**2 + x4*y1**2*y2 - x4*y1**2*y3 - x4*y1*y2**2 + x4*y1*y3**2 - x4*y1*z2**2 + x4*y1*z3**2 + x4*y2**2*y3 - x4*y2*y3**2 + x4*y2*z1**2 - x4*y2*z3**2 - x4*y3*z1**2 + x4*y3*z2**2)/(2*(x1*y2*z3 - x1*y2*z4 - x1*y3*z2 + x1*y3*z4 + x1*y4*z2 - x1*y4*z3 - x2*y1*z3 + x2*y1*z4 + x2*y3*z1 - x2*y3*z4 - x2*y4*z1 + x2*y4*z3 + x3*y1*z2 - x3*y1*z4 - x3*y2*z1 + x3*y2*z4 + x3*y4*z1 - x3*y4*z2 - x4*y1*z2 + x4*y1*z3 + x4*y2*z1 - x4*y2*z3 - x4*y3*z1 + x4*y3*z2))]
    ])

smpl=sy.simplify(Xu[0])
print(smpl)